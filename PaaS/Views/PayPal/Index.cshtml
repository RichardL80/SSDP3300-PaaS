@model PaaS.ViewModels.CheckoutVM;

@{
    ViewData["Title"] = "PayPal";
    decimal subtotal = @Model.CartItems.Sum(x => x.Quantity * x.Item.Price);
    decimal gst = subtotal * 0.05m;
    decimal pst = subtotal * 0.07m;
    decimal fee = subtotal * 0.03m;
    decimal total = Math.Round(subtotal + gst + pst + fee, 2);;
}

@section Styles {
    <link rel="stylesheet" href="~/css/cart.css" asp-append-version="true" />
	<link rel="stylesheet" href="~/css/account.css" asp-append-version="true" />
}

@* PayPal script *@
<script
    src="https://www.paypal.com/sdk/js?client-id=AV_6P7OPZwXSofUX2pdD0J1qymbE6k7rESrelqzf_jndK35unvyHtUdYyp5b8NefZA6W5I3QW0qzv5c4&currency=CAD">
</script>

<div class="p-grid-container">
    <div class="p-grid-item">
        <h1>Order Summary</h1>
    </div>
</div>
<div class="p-grid-summary">
    <div>
        <div class="p-grid-split mb-3">
            <h2>Delivery Address</h2>
        </div>
        <div class="addresses-content p-input-grid">
            @{
                int index = 1;
            }

            @foreach (var item in Model.ContactInfo)
            {
                <h3 class="fs-5 p-all">Address @index</h3>
                <div class="p-first ms-2">Address 1</div>
                <div> @item.Address1</div>
                <div class="ms-2">Address 2</div>
                <div> @item.Address2</div>
                <div class="ms-2">City/Prov</div>
                <div><span>@item.CityName</span>, <span>@item.ProvinceName</span></div>
                index++;
            }

        </div>
    </div>
    <div>
        <div class="p-grid-split mb-3">
            <h2>Order Details</h2>
        </div>
        <div id="cart-items" class="p-cart-item-container">
            @foreach (var item in Model.CartItems)
            {
                <div class="p-cart-item mb-4">
                    <img src="@item.Item.ImgUrl" alt="@item.Item.Name Image" width="100" height="100">
                    <div class="ms-3">
                        <h3>@item.Item.Name</h3>
                        <span>Quantity: @item.Quantity</span>
                        <div>@((item.Quantity * item.Item.Price).ToString("C"))</div>
                    </div>
                </div>
            }
            <div class="p-cart-item">
                <span>Subtotal</span>
                <span class="ms-3 p-amount-column">@subtotal.ToString("C")</span>
            </div>
            <div class="p-cart-item">
                <span>GST</span>
                <span class="ms-3 p-amount-column">@gst.ToString("C")</span>
            </div>
            <div class="p-cart-item">
                <span>PST</span>
                <span class="ms-3 p-amount-column">@pst.ToString("C")</span>
            </div>
            <div class="p-cart-item">
                <span>Fee</span>
                <span class="ms-3 p-amount-column">@fee.ToString("C")</span>
            </div>
            @*For Paypal*@
            <div class="p-cart-item mb-4">
                <span>Total</span>
                <span class="ms-3 p-amount-column" id="itemPrice" data-value="@total">@total.ToString("C")</span>
            </div>
            <span id="currency" data-value="CAD"></span>
            <div id="paypal-button-container"></div>
        </div>
    </div>
    @* This will need to be modified into a form  where the user selects their address, and delivery method*@
</div>

<script>
    paypal.Buttons({
        // Set up the transaction
        createOrder: function (data, actions) {
            // Retrieve the price and currency values from the data attributes
            const price = document.getElementById('itemPrice').getAttribute('data-value');
            const currency = document.getElementById('currency').getAttribute('data-value');

            return actions.order.create({
                purchase_units: [{
                    amount: {
                        value: price,
                        currency_code: currency
                    }
                }]
            });
        },

        // Finalize the transaction
        onApprove: function (data, actions) {
            return actions.order.capture().then(function (details) {
                // Redirect to the PayPalConfirmation action method
                window.location.href =
                    '/PayPal/PayPalConfirmation?TransactionId=' +
                    encodeURIComponent(details.id) + '&Amount=' +
                    encodeURIComponent(details.purchase_units[0].amount.value) +
                    '&PayerName=' +
                    encodeURIComponent(details.payer.name.given_name) +
                    '&Email=' + encodeURIComponent(details.payer.email_address);
            });
        },

        onCancel: function (data) {
            alert('Transaction was cancelled.');
        },
        onError: function (err) {
            alert('An error occurred during the transaction.');
        },

        style: {
            layout: 'vertical',
            color: 'blue',
            shape: 'rect',
            label: 'paypal'
        }
    }).render('#paypal-button-container');
</script>